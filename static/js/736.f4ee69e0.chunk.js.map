{"version":3,"file":"static/js/736.f4ee69e0.chunk.js","mappings":"+PAEaA,EAAaC,EAAAA,GAAAA,GAAH,4KAUVC,EAAYD,EAAAA,GAAAA,IAAH,+Z,sCCgDtB,EAnDa,WACT,OAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaV,OAXEE,EAAAA,EAAAA,YAAU,WACRH,GAAa,IACXI,EAAAA,EAAAA,IAAQH,GACPI,MAAK,SAAAC,GAAQ,OAAIR,EAAUQ,EAAd,IAEdC,YAAW,WACTP,GAAa,EAChB,GAAE,IAEJ,GAAC,CAACC,KAGH,iCACG,UAACR,EAAD,WACCI,EAAS,IACD,SAAC,IAAD,wDAERA,EAAOW,MAAM,EAAG,IAAIC,KAAI,SAAAC,GAAK,OACrB,UAACf,EAAD,YACI,SAAC,KAAD,WACE,gBACIgB,IACED,EAAME,aAAN,6CAC8CF,EAAME,cAC1B,IAAjBF,EAAMG,QACJC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,MAEbC,IAAKN,EAAMO,KACXC,MAAM,WAEZ,iBAAKC,UAAU,eAAf,WACE,wBAAKT,EAAMO,OACW,KAApBP,EAAMU,WACL,kBACA,kCAAUV,EAAMU,kBAjBTV,EAAMW,IAAMX,EAAMW,GADb,OAyB7BtB,IAAa,SAACuB,EAAA,EAAD,CAAQH,UAAU,aAGtC,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled  from 'styled-components';\n\nexport const ActorsList = styled.ul`\n  width: 90%;  \n  padding: 20px 0;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-row-gap: 32px;\n  justify-items: center;\n\n`\n\nexport const ActorCard = styled.div`\n        width: 200px;\n\n&>.info-wrapper {\n    background-color: var(--beige);\n    padding: 12px 8px;\n    height: 110px;\n    border-radius: 0 0 8px 8px;\n    overflow: hidden;\n\n    display: flex;\n    flex-direction: column;\n    gap:10px;\n\n    &>h3 {\n      text-align: center;\n    }\n\n    &>p{\n      font-weight: 600;\n      line-height: 1.3em;\n      color:#555 ;\n    }\n}\n\n` ","import {  useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'services/movies-api';\nimport Loader from 'components/Loader/Loader';\nimport { ActorsList, ActorCard  } from './Cast.styled';\nimport { ImgWrap } from 'pages/Home/Home.styled';\nimport { Note } from 'pages/Movies/Movies.styled';\nimport { ActorsListMaker , ActressesListMaker} from 'utils/castList';\n\n const Cast =()=> {\n    const [actors, setActors] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const { movieId } = useParams();\n   \n    useEffect(() => {\n      setIsLoading(true);\n        getCast(movieId)\n        .then(response => setActors(response))\n\n        setTimeout(() => {\n          setIsLoading(false);\n      }, 300);\n      \n    },[movieId]);\n\n  return (\n    <>\n       <ActorsList>\n       {actors < 1 && (\n                <Note>We don`t have a cast list for this movie!</Note>\n            )}\n       {actors.slice(0, 16).map(actor => (\n                <ActorCard key={actor.id && actor.id}>\n                    <ImgWrap>\n                      <img\n                          src={\n                            actor.profile_path\n                                  ? `https://image.tmdb.org/t/p/original${actor.profile_path}`\n                                  :  actor.gender === 1\n                                     ? ActressesListMaker()\n                                     : ActorsListMaker()\n                          }\n                          alt={actor.name}\n                          width='200'                    />\n                    </ImgWrap>\n                    <div className='info-wrapper'>\n                      <h3>{actor.name}</h3>\n                      {(actor.character === '') \n                      ?  <p></p>\n                      :  <p>Role: {actor.character}</p>\n                      }\n               \n                    </div>\n                </ActorCard>\n            ))}\n       </ActorsList>\n       {isLoading && <Loader className=\"loader\" />}\n    </>\n  )\n}\nexport default Cast"],"names":["ActorsList","styled","ActorCard","useState","actors","setActors","isLoading","setIsLoading","movieId","useParams","useEffect","getCast","then","response","setTimeout","slice","map","actor","src","profile_path","gender","ActressesListMaker","ActorsListMaker","alt","name","width","className","character","id","Loader"],"sourceRoot":""}